/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db.tables.daos


import com.kotlinspring.infrastructure.db.tables.User
import com.kotlinspring.infrastructure.db.tables.records.UserRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class UserDao(configuration: Configuration?) : DAOImpl<UserRecord, com.kotlinspring.infrastructure.db.tables.pojos.User, UUID>(User.USER, com.kotlinspring.infrastructure.db.tables.pojos.User::class.java, configuration) {

    /**
     * Create a new UserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.kotlinspring.infrastructure.db.tables.pojos.User): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetchRange(User.USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetch(User.USER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.kotlinspring.infrastructure.db.tables.pojos.User? = fetchOne(User.USER.ID, value)

    /**
     * Fetch records that have <code>firstName BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstname(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetchRange(User.USER.FIRSTNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>firstName IN (values)</code>
     */
    fun fetchByFirstname(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetch(User.USER.FIRSTNAME, *values)

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastname(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetchRange(User.USER.LASTNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    fun fetchByLastname(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetch(User.USER.LASTNAME, *values)

    /**
     * Fetch records that have <code>passwordHash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPasswordhash(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetchRange(User.USER.PASSWORDHASH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>passwordHash IN (values)</code>
     */
    fun fetchByPasswordhash(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetch(User.USER.PASSWORDHASH, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByEmail(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.User> = fetch(User.USER.EMAIL, *values)
}
