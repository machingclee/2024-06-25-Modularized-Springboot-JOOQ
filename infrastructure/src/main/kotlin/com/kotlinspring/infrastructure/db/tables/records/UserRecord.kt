/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db.tables.records


import com.kotlinspring.infrastructure.db.tables.User

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "User",
    schema = "public"
)
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER) {

    @get:Id
    @get:Column(name = "id")
    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    @get:Column(name = "firstName", nullable = false, length = 30)
    open var firstname: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Column(name = "lastname", nullable = false, length = 30)
    open var lastname: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @get:Column(name = "passwordHash", nullable = false)
    open var passwordhash: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:Column(name = "email", nullable = false)
    open var email: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: UUID? = null, firstname: String? = null, lastname: String? = null, passwordhash: String? = null, email: String? = null): this() {
        this.id = id
        this.firstname = firstname
        this.lastname = lastname
        this.passwordhash = passwordhash
        this.email = email
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(value: com.kotlinspring.infrastructure.db.tables.pojos.User?): this() {
        if (value != null) {
            this.id = value.id
            this.firstname = value.firstname
            this.lastname = value.lastname
            this.passwordhash = value.passwordhash
            this.email = value.email
            resetChangedOnNotNull()
        }
    }
}
