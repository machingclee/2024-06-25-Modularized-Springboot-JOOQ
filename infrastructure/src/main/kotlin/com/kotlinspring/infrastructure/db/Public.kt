/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db


import com.kotlinspring.infrastructure.db.sequences.TEACHER_ID_SEQ
import com.kotlinspring.infrastructure.db.tables.Course
import com.kotlinspring.infrastructure.db.tables.Teacher
import com.kotlinspring.infrastructure.db.tables.User
import com.kotlinspring.infrastructure.db.tables._PrismaMigrations

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Sequence
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public._prisma_migrations</code>.
     */
    val _PRISMA_MIGRATIONS: _PrismaMigrations get() = _PrismaMigrations._PRISMA_MIGRATIONS

    /**
     * The table <code>public.Course</code>.
     */
    val COURSE: Course get() = Course.COURSE

    /**
     * The table <code>public.Teacher</code>.
     */
    val TEACHER: Teacher get() = Teacher.TEACHER

    /**
     * The table <code>public.User</code>.
     */
    val USER: User get() = User.USER

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getSequences(): List<Sequence<*>> = listOf(
        TEACHER_ID_SEQ
    )

    override fun getTables(): List<Table<*>> = listOf(
        _PrismaMigrations._PRISMA_MIGRATIONS,
        Course.COURSE,
        Teacher.TEACHER,
        User.USER
    )
}
