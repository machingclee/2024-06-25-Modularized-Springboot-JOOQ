/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db.tables.daos


import com.kotlinspring.infrastructure.db.enums.Courseapprovalstatus
import com.kotlinspring.infrastructure.db.tables.Course
import com.kotlinspring.infrastructure.db.tables.records.CourseRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class CourseDao(configuration: Configuration?) : DAOImpl<CourseRecord, com.kotlinspring.infrastructure.db.tables.pojos.Course, UUID>(Course.COURSE, com.kotlinspring.infrastructure.db.tables.pojos.Course::class.java, configuration) {

    /**
     * Create a new CourseDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.kotlinspring.infrastructure.db.tables.pojos.Course): UUID? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID?, upperInclusive: UUID?): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetchRange(Course.COURSE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetch(Course.COURSE.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): com.kotlinspring.infrastructure.db.tables.pojos.Course? = fetchOne(Course.COURSE.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetchRange(Course.COURSE.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetch(Course.COURSE.NAME, *values)

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCategory(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetchRange(Course.COURSE.CATEGORY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    fun fetchByCategory(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetch(Course.COURSE.CATEGORY, *values)

    /**
     * Fetch records that have <code>teacherId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTeacherid(lowerInclusive: Int?, upperInclusive: Int?): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetchRange(Course.COURSE.TEACHERID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>teacherId IN (values)</code>
     */
    fun fetchByTeacherid(vararg values: Int): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetch(Course.COURSE.TEACHERID, *values.toTypedArray())

    /**
     * Fetch records that have <code>approvalStatus BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfApprovalstatus(lowerInclusive: Courseapprovalstatus?, upperInclusive: Courseapprovalstatus?): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetchRange(Course.COURSE.APPROVALSTATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>approvalStatus IN (values)</code>
     */
    fun fetchByApprovalstatus(vararg values: Courseapprovalstatus): List<com.kotlinspring.infrastructure.db.tables.pojos.Course> = fetch(Course.COURSE.APPROVALSTATUS, *values)
}
