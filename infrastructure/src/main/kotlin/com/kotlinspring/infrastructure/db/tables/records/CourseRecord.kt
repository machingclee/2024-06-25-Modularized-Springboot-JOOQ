/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db.tables.records


import com.kotlinspring.infrastructure.db.enums.Courseapprovalstatus
import com.kotlinspring.infrastructure.db.tables.Course

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "Course",
    schema = "public"
)
open class CourseRecord() : UpdatableRecordImpl<CourseRecord>(Course.COURSE) {

    @get:Id
    @get:Column(name = "id")
    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    @get:Column(name = "name", nullable = false)
    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Column(name = "category", nullable = false)
    open var category: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @get:Column(name = "teacherId")
    open var teacherid: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    @get:Column(name = "approvalStatus")
    open var approvalstatus: Courseapprovalstatus?
        set(value): Unit = set(4, value)
        get(): Courseapprovalstatus? = get(4) as Courseapprovalstatus?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised CourseRecord
     */
    constructor(id: UUID? = null, name: String? = null, category: String? = null, teacherid: Int? = null, approvalstatus: Courseapprovalstatus? = null): this() {
        this.id = id
        this.name = name
        this.category = category
        this.teacherid = teacherid
        this.approvalstatus = approvalstatus
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised CourseRecord
     */
    constructor(value: com.kotlinspring.infrastructure.db.tables.pojos.Course?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.category = value.category
            this.teacherid = value.teacherid
            this.approvalstatus = value.approvalstatus
            resetChangedOnNotNull()
        }
    }
}
