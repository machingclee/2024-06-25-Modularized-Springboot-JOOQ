/*
 * This file is generated by jOOQ.
 */
package com.kotlinspring.infrastructure.db.tables.daos


import com.kotlinspring.infrastructure.db.tables._PrismaMigrations
import com.kotlinspring.infrastructure.db.tables.records._PrismaMigrationsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl
import org.springframework.stereotype.Repository


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Repository
open class _PrismaMigrationsDao(configuration: Configuration?) : DAOImpl<_PrismaMigrationsRecord, com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations, String>(_PrismaMigrations._PRISMA_MIGRATIONS, com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations::class.java, configuration) {

    /**
     * Create a new _PrismaMigrationsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations): String = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: String): com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations? = fetchOne(_PrismaMigrations._PRISMA_MIGRATIONS.ID, value)

    /**
     * Fetch records that have <code>checksum BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfChecksum(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.CHECKSUM, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>checksum IN (values)</code>
     */
    fun fetchByChecksum(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.CHECKSUM, *values)

    /**
     * Fetch records that have <code>finished_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFinishedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.FINISHED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>finished_at IN (values)</code>
     */
    fun fetchByFinishedAt(vararg values: OffsetDateTime): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.FINISHED_AT, *values)

    /**
     * Fetch records that have <code>migration_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfMigrationName(lowerInclusive: String, upperInclusive: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.MIGRATION_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>migration_name IN (values)</code>
     */
    fun fetchByMigrationName(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.MIGRATION_NAME, *values)

    /**
     * Fetch records that have <code>logs BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLogs(lowerInclusive: String?, upperInclusive: String?): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.LOGS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>logs IN (values)</code>
     */
    fun fetchByLogs(vararg values: String): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.LOGS, *values)

    /**
     * Fetch records that have <code>rolled_back_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRolledBackAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.ROLLED_BACK_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rolled_back_at IN (values)</code>
     */
    fun fetchByRolledBackAt(vararg values: OffsetDateTime): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.ROLLED_BACK_AT, *values)

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStartedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.STARTED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    fun fetchByStartedAt(vararg values: OffsetDateTime): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.STARTED_AT, *values)

    /**
     * Fetch records that have <code>applied_steps_count BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfAppliedStepsCount(lowerInclusive: Int?, upperInclusive: Int?): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetchRange(_PrismaMigrations._PRISMA_MIGRATIONS.APPLIED_STEPS_COUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>applied_steps_count IN (values)</code>
     */
    fun fetchByAppliedStepsCount(vararg values: Int): List<com.kotlinspring.infrastructure.db.tables.pojos._PrismaMigrations> = fetch(_PrismaMigrations._PRISMA_MIGRATIONS.APPLIED_STEPS_COUNT, *values.toTypedArray())
}
